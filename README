# restmock

restmock is a server that serves mostly static content.  This content
is determined by a config file external to the server; restmock reads
this config file and generates a handler based off of it.

## Usage

Put your config file and any files that will be served by restmock in
$CONFIG_LOCATION.  This location will need to be on your classpath
when you run the server to be visible.

lein deps
lein uberjar
java -classpath $CONFIG_LOCATION:./restmock-1.0.0-SNAPSHOT-standalone.jar restmock.core --config <default config.xml> --port <default 5000>

Because of how java -jar works (sets classpath to that in the
Manifest), it is not possible to run restmock with java -jar and still
have it properly read the configuration.

Configuration is specified by an XML file.  Paths are regular
expressions.  On match you can return static XML or JSON, text, or a
mock REST endpoint that will behave as expected to GET, PUT, POST, and
DELETE calls.

There is currently no support for XML/JSON validation or special
behavior on POSTs.  What you post is what you get (WYPIWYG).

<xml>
  <routes>
    <route>
      <request>
        <path>/foo</path>
      </request>
      <response>
        <type>text</type>
        <config>
          <text>foo</text>
        </config>
      </response>
    </route>
    <route>
      <request>
        <path>/bar</path>
      </request>
      <response>
        <type>text</type>
        <config>
          <text>bar</text>
        </config>
      </response>
    </route>
    <route>
      <request>
        <path>/person/([0-9]+)</path>
      </request>
      <response>
        <type>xml</type>
        <config>
          <file>person.xml</file>
        </config>
      </response>
    </route>
    <route>
      <request>
         <path>/photos/</path>
      </request>
      <response>
         <type>mock</type>
         <config>
           <name>photos</name>
           <contentType>xml</contentType>
         </config>
      </response>
    </route>
  </routes>
</xml>

Files specified by your configuration also need to be accessible from
your classpath.

## Changes in 1.0

* Initial release

## Changes in 1.1

* Add concept of 'mock' path which mimics a standard REST endpoint
* Slightly change structure of config file to be more consistent

## License

Copyright (C) 2010 Dave King <tildedave@gmail.com>

          Distributed under the Eclipse Public License, the same as Clojure.
